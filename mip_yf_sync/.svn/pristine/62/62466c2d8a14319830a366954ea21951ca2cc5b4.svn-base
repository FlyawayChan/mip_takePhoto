package com.mip.biz.oms.yf_sync.service.impl;

import com.mip.biz.oms.kdatacalcNew.service.impl.KdataCalcNewServiceImpl;
import com.mip.biz.oms.yf_sync.db.DBUtils;
import com.mip.biz.oms.yf_sync.service.yfSyncService;
import com.mip.core.basebiz.dto.DataRecord;
import com.mip.core.basebiz.service.ServiceException;
import com.mip.core.basebiz.service.impl.BizServiceImpl;
import com.mip.core.util.ServiceLocator;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.jdbc.datasource.DataSourceTransactionManager;
import org.springframework.transaction.TransactionDefinition;
import org.springframework.transaction.TransactionStatus;
import org.springframework.transaction.support.DefaultTransactionDefinition;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.*;

public class yfSyncServiceImpl extends BizServiceImpl implements yfSyncService {
    private static Logger logger = LoggerFactory.getLogger(KdataCalcNewServiceImpl.class);
    private static SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd HH:mm");
    private static SimpleDateFormat sdf2 = new SimpleDateFormat("yyyy-MM-dd");

    @Override
    public List<DataRecord> getSyncData(Date beginTime, Date endTime) {
        List<DataRecord> list = new ArrayList<>();
        Connection conn = null;
        String sql = "SELECT * FROM  yyzh_zygk_zyjh";
        try{
            conn = DBUtils.getConnection();
            Statement st = conn.createStatement();
            if (beginTime != null && endTime != null){
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                String begin = sdf.format(beginTime);
                String end = sdf.format(endTime);
                sql += " where fbsj >='" + begin + "' and fbsj <= '" + end + "'";
            }
            sql += " order by fbsj desc";
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()){
                String task_title = rs.getString("jhlx");
                String task_summary = rs.getString("sgnr");
                Date begin_time = rs.getDate("jhkssj");
                Date end_time = rs.getDate("jhjssj");
                long exe_user_id = 0;
                String exe_user_name = rs.getString("gzfzr");
                Date create_time = rs.getDate("fbsj");
                Date entity_modifytime = rs.getDate("fbsj");

                DataRecord s = new DataRecord();
                s.put("task_title", task_title);
                s.put("task_summary", task_summary);
                s.put("begin_time", begin_time);
                s.put("end_time", end_time);
                s.put("exe_user_id", exe_user_id);
                s.put("exe_user_name", exe_user_name);
                s.put("create_time", create_time);
                s.put("entity_modifytime", entity_modifytime);

                //todo chenxy 测试使用
                s.put("CREATE_USER_ID", "7937518");
                s.put("CREATE_USER_NAME", "测试用户");
                s.put("CLIENT_ID", "7937518");

                list.add(s);
            }
            return list;
        }catch (Exception e){
            e.printStackTrace();
            throw new RuntimeException("获取数据失败", e);
        } finally {
            DBUtils.close(conn);
        }
    }

    @Override
    public void countDayData() {
        try {
            //时间周期为一天
            String timeType = "DAY";
            List<DataRecord> dataList  = this.getSyncData(null,null);

            Calendar lastTime = Calendar.getInstance();
            if(dataList != null){
                String lastCalcedTime = dataList.get(0).getString("create_time");

                lastTime.setTime(sdf2.parse(lastCalcedTime));
                lastTime.add(Calendar.DAY_OF_YEAR,1);
            }else{
                lastTime.add(Calendar.DAY_OF_YEAR,-3);//从现在之前的2天之前开始
            }

            lastTime.set(Calendar.HOUR_OF_DAY,0);
            lastTime.set(Calendar.MINUTE,0);
            lastTime.set(Calendar.SECOND,0);

            Calendar now = Calendar.getInstance();
            while(lastTime.before(now)){
                Calendar beginCalendar = Calendar.getInstance();
                beginCalendar.setTime(lastTime.getTime());
                beginCalendar.set(Calendar.HOUR_OF_DAY,0);
                beginCalendar.set(Calendar.MINUTE,0);
                beginCalendar.set(Calendar.SECOND,0);

                Calendar endCalendar = Calendar.getInstance();
                endCalendar.setTime(lastTime.getTime());
                endCalendar.set(Calendar.HOUR_OF_DAY,23);
                endCalendar.set(Calendar.MINUTE,59);
                endCalendar.set(Calendar.SECOND,59);

                calcKdata(timeType,beginCalendar.getTime(),endCalendar.getTime(),false);

                lastTime.add(Calendar.DAY_OF_YEAR,1);
            }
        } catch (Exception e) {
            logger.error("yfSyncServiceImpl.countDayData()",e);
        }
    }

    private void calcKdata(String timeType,Date beginTime,Date endTime,boolean needReCalc) throws ServiceException {
        DataSourceTransactionManager transactionManager = (DataSourceTransactionManager) ServiceLocator.getBean("transactionManager");
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW);
        TransactionStatus status = transactionManager.getTransaction(def);
        try {
            calcKdataImpl(timeType,beginTime,endTime,needReCalc);
            transactionManager.commit(status);
        } catch (Exception e) {
            transactionManager.rollback(status);
            throw e;
        }
    }

    private void calcKdataImpl(String timeType,Date beginTime,Date endTime,boolean needReCalc) throws ServiceException{
        logger.info("calcKdataImpl:timeType:{},beginTime:{},endTime:{},needReCalc:{}",timeType,beginTime,endTime,needReCalc);

        Map<String, Object> param = new HashMap<String, Object>();

        param.clear();
        param.put("ORI_TABLE_NAME", "YD_EPCBM.MIP_PATROL_TASK");
        param.put("BEGIN_TIME", beginTime);
        param.put("END_TIME", endTime);

        List<DataRecord> kDatas  = this.getSyncData(beginTime, endTime);
        String kdataTableName = "YD_EPCBM.MIP_PATROL_TASK";
        int i = 0;
        for(DataRecord dd : kDatas){
            Long oldKdataId = this.getKDataId(kdataTableName,beginTime,endTime);
            logger.info("oldKdataId:{}",oldKdataId);
            if(oldKdataId != null){
                param.clear();
                param.put("ID",oldKdataId);
                this.getDao().update(kdataTableName,dd,param);
            }else{
                dd.put("CREATE_TIME",new Date());
                dd.put("ID",this.generateLongId(null));
                this.getDao().insert(kdataTableName,dd);
            }
        }

    }

    private Long getKDataId(String tableName,Date beginTime, Date endTime){
//        Map<String, Object> param = new HashMap<String, Object>();
//        param.put("KDATA_TABLE_NAME", tableName);
//        param.put("BEGIN_TIME", beginTime);
//        param.put("END_TIME", endTime);
//        List<DataRecord> result = this.getDao().queryForDataSet(SQLMAP_PACKAGE+"getKDataId", param,false).getResults();
//        if(result!=null && result.size()>0){
//            return result.get(0).getLong("ID");
//        }
        return null;
    }

}
